import numpy as np
# pip install numpy-quaternion
import quaternion
import argparse
from associate import read_file_list

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Convert tum .freiburg to redwood .log')
    parser.add_argument('filename', type=str, help='input filename[.txt]')

    args = parser.parse_args()

    poses_dict = read_file_list(args.filename)

    with open(''.join(args.filename.split('.')[:-1]) + '.log', 'w') as f:
        for i, (_, v) in enumerate(poses_dict.items()):
            tq = np.array(list(map(float, v)))
            t = tq[:3]
            q_tum = tq[3:]
            # xyzw to wxyz
            q = np.quaternion(q_tum[3], q_tum[0], q_tum[1], q_tum[2])
            R = quaternion.as_rotation_matrix(q)
            T = np.identity(4)
            T[:3, :3] = R
            T[:3, 3] = t

            f.write('{} {} -1\n'.format(i, i + 1))
            for i in range(4):
                f.write(' '.join(list(map(str, T[i]))) + '\n')


    # poses = []
    # with open(args.filename) as f:
    #     lines = f.readlines()
    #     for i in range(0, len(lines), 5):
    #         T = np.zeros((4, 4))
    #         for r in range(0, 4):
    #             T[r, :] = list(map(float, lines[i + r + 1].split()))
    #         translation = T[0:3, 3]
    #         rotation = T[0:3, 0:3]
    #         q = quaternion.from_rotation_matrix(rotation)
    #         q_tum = quaternion.as_float_array(q)[[1, 2, 3, 0]]
    #         poses.append(np.concatenate((translation, q_tum)))

    # with open(args.filename[:-4] + '.freiburg', 'w') as f:
    #     f.write('# generated by convert_log_to_freiburg.py\n')
    #     for i, pose in enumerate(poses):
    #         f.write('{} {} {} {} {} {} {} {}\n'.format(
    #                 i, 
    #                 pose[0], pose[1], pose[2], 
    #                 pose[3], pose[4], pose[5], pose[6]))
